<?xml version="1.0" encoding="windows-1251"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
<title>BruteBlock V@RELEASE@</title>
</head>
<body>
<a href="index.html.ru">Russian Version</a>
<h1 style="text-align:center">BRUTEBLOCK V@RELEASE@</h1>

<h2>About bruteblock</h2>

Bruteblock allows system administrators to block various bruteforce
attacks on UNIX services. The program analyzes system logs and
adds attacker's IP address into ipfw2 table effectively blocking them.
Addresses are automatically removed from the table after specified
abound of time. Bruteblock uses regular expressions to parse
logs, which gives flexibility allowing it to be used with almost
any network service. Bruteblock is written in pure C, doesn't
use any external programs and works with ipfw2 tables via raw
sockets API.

<h2>System requirements</h2>

Bruteblock requires <a href="http://www.freebsd.org" target="_blank">FreeBSD</a>
5.3 and above (tested on FreeBSD 5.3, 5.4, 6.1) with ipfw2 firewall.
To compile and run the program, you'll need 
<a href="http://www.pcre.org" target="_blank">PCRE library</a>, which may be 
installed from ports (<a href="http://www.freshports.org/devel/pcre/" target="_blank">devel/pcre</a>).

<h2>How it works</h2>

Bruteblock consists of two binaries: bruteblock and bruteblockd.
`bruteblock' is intended to be used in <tt>/etc/syslog.conf</tt> to pipe
logs into. It does log analysis and adding addresses into ipfw
table. Along with address and mask, every entry in ipfw2 table
has `value` field, which is used by bruteblock to store expiration
time as 32 bit UNIX timestamp. `bruteblock' is a daemon, which
checks ipfw2 table periodically and removes expired entries.

Such design allows to avoid any IPC use and to store entries for
different services in one table. This also makes it easy for the
administrator to get list of currently blocked addresses and
edit the list if needed so.

<h2>Download</h2>
<a href="bruteblock-@RELEASE@.tar.gz">bruteblock-@RELEASE@.tar.gz</a> - source code.<br/>
<a href="CHANGES">CHANGES</a> - change list.

<h2>Installation</h2>

To compile the program run `make` in bruteblock directory. After
compilation, copy bruteblock and bruteblockd files into system
binary directory (<tt>/usr/local/sbin</tt>). Copy bruteblock-ssh.conf
into directory where configuration files are located (<tt>/usr/local/etc</tt>)
and edit it to make it suit your needs. Edit <tt>/etc/syslog.conf</tt>
and add the following entry:

<pre>
auth.info;authpriv.info      |exec /usr/local/sbin/bruteblock -f /usr/local/etc/bruteblock-ssh.conf
</pre>

then restart syslogd (/etc/rc.d/syslogd restart).

Run bruteblockd, specifying the same ipfw2 table number as in
config file (with -t parameter, e.g. 
'<tt># /usr/local/bin/bruteblockd -t 1</tt>'). Finally, add ipfw rules to block
any packets from addresses that match the table, like this:

<pre>
${fwcmd} add deny ip from me to table\(1\)
${fwcmd} add deny ip from table\(1\) to me
</pre>

Now bruteblock will do it's job.

<h2>Configuration</h2>

Configuration file for bruteblock utility allows you to set
following values:<br/>

<tt>regexp</tt> - regular expression in perl-compatible format that is
used to extract failed password attempts from log files.<br/>
<tt>"regexp0","regexp1",... "regexp9"</tt> - optional fields with up to 10 additional
regular expressions.
<tt>max_count</tt>, <tt>within_time</tt> - defines time interval and maximum number of failed
password attempts during that interval. If the number is exceeded
by specific IP, that IP is blocked.<br/>
<tt>reset_ip</tt> - time-to-live of a block. When it expires, address is
removed from table, thus becoming unblocked.<br/>
<tt>ipfw2_table_no</tt> - number of ipfw2 table to add bad IPs to. Must
match -t parameter of bruteblockd.

<h2>TODO</h2>

Add configuration examples for other popular services, add IPv6 support (help
needed), optimize algorithms used by bruteblock, 
create security/bruteblock port, add pf support.
<br/><br/>

<i>Any feedback is appreciated. Author's email: samm [at] os2.kiev.ua.</i>

<hr/>
<small>&copy; Alex Samorukov</small>

<p>
<a href="http://validator.w3.org/check?uri=referer"><img
 src="http://www.w3.org/Icons/valid-xhtml10"
alt="Valid XHTML 1.0 Transitional" border="0" height="31" width="88" /></a>
<a href="http://freshmeat.net/"><img
 src="http://images.freshmeat.net/img/link_button_2.gif" width="88" height="31"
 border="0" alt="freshmeat.net"/></a>
</p>
</body>
</html>
